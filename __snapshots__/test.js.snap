// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`async functions Pig Latin 1`] = `
"
const ingImportayisThay = require('somethingImported').default;
const { spreadable: adablespreay } = ingImportayisThay;
import ateverwhayisThay from 'anNPMmodule';
console.log(adablespreay);
console.log(ateverwhayisThay.anObjectProp.anotherObjectProp);
var asebayariableVay = 'base variable';
const antconstay = 'constant variable';
let angeablechay = 'lettable variable';
function ethingsomay(asiblefeay, aciouslocquay) {
	let omesayordsWay = 'something feasible' + asiblefeay;
	return omesayordsWay;
}
angeablechay = 'we changed it!';
let omesayayArray = [asebayariableVay, antconstay, angeablechay, ethingsomay];
const anayectObjay = {
	someName: 'a string',
	baseVariable: asebayariableVay
};
const { someName: omesayameNay } = anayectObjay;
module.exports = {
	something: ethingsomay,
	changeable: angeablechay
};
export default asebayariableVay;
export { omesayayArray as someArray };"
`;

exports[`async functions crime 1`] = `
"
const ferreeGangerReportingDismiss = require('somethingImported').default;
const { spreadable } = ferreeGangerReportingDismiss;
import whereverStysMissus from 'anNPMmodule';
console.log(spreadable);
console.log(whereverStysMissus.anObjectProp.anotherObjectProp);
var interlaceInvariable = 'base variable';
const constant = 'constant variable';
let exchangeable = 'lettable variable';
function twentysomething(unfeasible, locquacious) {
	let schummBirds = 'something feasible' + unfeasible;
	return schummBirds;
}
exchangeable = 'we changed it!';
let plumbLait = [interlaceInvariable, constant, exchangeable, twentysomething];
const sowdenEffect = {
	someName: 'a string',
	baseVariable: interlaceInvariable
};
const { someName: scumDeclaim } = sowdenEffect;
module.exports = {
	something: twentysomething,
	changeable: exchangeable
};
export default interlaceInvariable;
export { plumbLait as someArray };"
`;

exports[`async functions keystone.js 1`] = `
"
var _3 = require('lodash');
var expressay = require('express');
var applinggray = require('grappling-hook');
var athpay = require('path');
var ilsutay = require('keystone-utils');
var erimportay = require('./lib/core/importer');

/**
 * Don't use process.cwd() as it breaks module encapsulation
 * Instead, let's use module.parent if it's present, or the module itself if there is no parent (probably testing keystone directly if that's the case)
 * This way, the consuming app/module can be an embedded node_module and path resolutions will still work
 * (process.cwd() breaks module encapsulation if the consuming app/module is itself a node_module)
 */
var odulemayootRay = function (oot_rayathPay) {
	var artspay = oot_rayathPay.split(athpay.sep);
	artspay.pop(); // get rid of /node_modules from the end of the path
	return artspay.join(athpay.sep);
}(module.parent ? module.parent.paths[0] : module.paths[0]);

/**
 * Keystone Class
 */
var eystoneKay = function () {
	applinggray.mixin(this).allowHooks('pre:static', 'pre:bodyparser', 'pre:session', 'pre:logger', 'pre:admin', 'pre:routes', 'pre:render', 'updates', 'signin', 'signout');
	this.lists = {};
	this.fieldTypes = {};
	this.paths = {};
	this._options = {
		'name': 'Keystone',
		'brand': 'Keystone',
		'admin path': 'keystone',
		'compress': true,
		'headless': false,
		'logger': ':method :url :status :response-time ms',
		'auto update': false,
		'model prefix': null,
		'module root': odulemayootRay,
		'frame guard': 'sameorigin',
		'cache admin bundles': true
	};
	this._redirects = {};

	// expose express
	this.express = expressay;

	// init environment defaults
	this.set('env', process.env.NODE_ENV || 'development');

	this.set('port', process.env.PORT || process.env.OPENSHIFT_NODEJS_PORT || '3000');
	this.set('host', process.env.HOST || process.env.IP || process.env.OPENSHIFT_NODEJS_IP || '0.0.0.0');
	this.set('listen', process.env.LISTEN);

	this.set('ssl', process.env.SSL);
	this.set('ssl port', process.env.SSL_PORT || '3001');
	this.set('ssl host', process.env.SSL_HOST || process.env.SSL_IP);
	this.set('ssl key', process.env.SSL_KEY);
	this.set('ssl cert', process.env.SSL_CERT);

	this.set('cookie secret', process.env.COOKIE_SECRET);
	this.set('cookie signin', this.get('env') === 'development' ? true : false);

	this.set('embedly api key', process.env.EMBEDLY_API_KEY || process.env.EMBEDLY_APIKEY);
	this.set('mandrill api key', process.env.MANDRILL_API_KEY || process.env.MANDRILL_APIKEY);
	this.set('mandrill username', process.env.MANDRILL_USERNAME);
	this.set('google api key', process.env.GOOGLE_BROWSER_KEY);
	this.set('google server api key', process.env.GOOGLE_SERVER_KEY);
	this.set('ga property', process.env.GA_PROPERTY);
	this.set('ga domain', process.env.GA_DOMAIN);
	this.set('chartbeat property', process.env.CHARTBEAT_PROPERTY);
	this.set('chartbeat domain', process.env.CHARTBEAT_DOMAIN);
	this.set('allowed ip ranges', process.env.ALLOWED_IP_RANGES);

	if (process.env.S3_BUCKET && process.env.S3_KEY && process.env.S3_SECRET) {
		this.set('s3 config', { bucket: process.env.S3_BUCKET, key: process.env.S3_KEY, secret: process.env.S3_SECRET, region: process.env.S3_REGION });
	}

	if (process.env.AZURE_STORAGE_ACCOUNT && process.env.AZURE_STORAGE_ACCESS_KEY) {
		this.set('azurefile config', { account: process.env.AZURE_STORAGE_ACCOUNT, key: process.env.AZURE_STORAGE_ACCESS_KEY });
	}

	if (process.env.CLOUDINARY_URL) {
		// process.env.CLOUDINARY_URL is processed by the cloudinary package when this is set
		this.set('cloudinary config', true);
	}

	// init mongoose
	this.set('mongoose', require('mongoose'));
	this.mongoose.Promise = require('es6-promise').Promise;

	// Attach middleware packages, bound to this instance
	this.middleware = {
		api: require('./lib/middleware/api')(this),
		cors: require('./lib/middleware/cors')(this)
	};
};

_3.extend(eystoneKay.prototype, require('./lib/core/options'));

eystoneKay.prototype.prefixModel = function (eykay) {
	var elmodayefixPray = this.get('model prefix');

	if (elmodayefixPray) {
		eykay = elmodayefixPray + '_' + eykay;
	}

	return require('mongoose/lib/utils').toCollectionName(eykay);
};

/* Attach core functionality to Keystone.prototype */
eystoneKay.prototype.createItems = require('./lib/core/createItems');
eystoneKay.prototype.createRouter = require('./lib/core/createRouter');
eystoneKay.prototype.getOrphanedLists = require('./lib/core/getOrphanedLists');
eystoneKay.prototype.importer = erimportay;
eystoneKay.prototype.init = require('./lib/core/init');
eystoneKay.prototype.initDatabaseConfig = require('./lib/core/initDatabaseConfig');
eystoneKay.prototype.initExpressApp = require('./lib/core/initExpressApp');
eystoneKay.prototype.initExpressSession = require('./lib/core/initExpressSession');
eystoneKay.prototype.initNav = require('./lib/core/initNav');
eystoneKay.prototype.list = require('./lib/core/list');
eystoneKay.prototype.openDatabaseConnection = require('./lib/core/openDatabaseConnection');
eystoneKay.prototype.closeDatabaseConnection = require('./lib/core/closeDatabaseConnection');
eystoneKay.prototype.populateRelated = require('./lib/core/populateRelated');
eystoneKay.prototype.redirect = require('./lib/core/redirect');
eystoneKay.prototype.start = require('./lib/core/start');
eystoneKay.prototype.wrapHTMLError = require('./lib/core/wrapHTMLError');
eystoneKay.prototype.createKeystoneHash = require('./lib/core/createKeystoneHash');

/* Deprecation / Change warnings for 0.4 */
eystoneKay.prototype.routes = function () {
	throw new Error('keystone.routes(fn) has been removed, use keystone.set(\\"routes\\", fn)');
};

/**
 * The exports object is an instance of Keystone.
 */
var eystonekay = module.exports = new eystoneKay();

/*
	Note: until #1777 is complete, the order of execution here with the requires
	(specifically, they happen _after_ the module.exports above) is really
	important. As soon as the circular dependencies are sorted out to get their
	keystone instance from a closure or reference on {this} we can move these
	bindings into the Keystone constructor.
*/

// Expose modules and Classes
eystonekay.Admin = {
	Server: require('./admin/server')
};
eystonekay.Email = require('./lib/email');
eystonekay.Field = require('./fields/types/Type');
eystonekay.Field.Types = require('./lib/fieldTypes');
eystonekay.Keystone = eystoneKay;
eystonekay.List = require('./lib/list')(eystonekay);
eystonekay.Storage = require('./lib/storage');
eystonekay.View = require('./lib/view');

eystonekay.content = require('./lib/content');
eystonekay.security = {
	csrf: require('./lib/security/csrf')
};
eystonekay.utils = ilsutay;

/**
 * returns all .js modules (recursively) in the path specified, relative
 * to the module root (where the keystone project is being consumed from).
 *
 * ####Example:
 *     var models = keystone.import('models');
 */

eystoneKay.prototype.import = function (amedirnay) {
	return erimportay(this.get('module root'))(amedirnay);
};

/**
 * Applies Application updates
 */

eystoneKay.prototype.applyUpdates = function (allbackcay) {
	var elfsay = this;
	elfsay.callHook('pre:updates', function (erray) {
		if (erray) return allbackcay(erray);
		require('./lib/updates').apply(function (erray) {
			if (erray) return allbackcay(erray);
			elfsay.callHook('post:updates', allbackcay);
		});
	});
};

/**
 * Logs a configuration error to the console
 */

eystoneKay.prototype.console = {};
eystoneKay.prototype.console.err = function (_type2, _msg2) {
	if (eystonekay.get('logger')) {
		var ashesday = '------------------------------------------------';
		console.log(ashesday + 'KeystoneJS: ' + _type2 + _msg2 + ashesday);
	}
};

/**
 * Keystone version
 */

eystonekay.version = require('./package.json').version;

// Expose Modules
eystonekay.session = require('./lib/session');"
`;
